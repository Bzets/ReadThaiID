import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import json
import os
from datetime import datetime

# --- Global Configurations ---
USER_FILE = "users.json"
PRODUCTS_BY_CATEGORY = {
    "‡∏Å‡∏≤‡πÅ‡∏ü": [
        ("‡∏Å‡∏≤‡πÅ‡∏ü‡∏î‡∏≥", 30), ("‡πÄ‡∏≠‡∏™‡πÄ‡∏õ‡∏£‡∏™‡πÇ‡∏ã‡πà", 40), ("‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà", 45),
        ("‡∏•‡∏≤‡πÄ‡∏ï‡πâ", 45), ("‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤", 50)
    ],
    "‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï": [
        ("‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢", 35), ("‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß", 40), ("‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï‡∏£‡πâ‡∏≠‡∏ô", 45),
        ("‡πÇ‡∏Å‡πÇ‡∏Å‡πâ", 40)
    ],
    "‡πÇ‡∏ã‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ": [
        ("‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°‡πÇ‡∏ã‡∏î‡∏≤", 35), ("‡∏ô‡πâ‡∏≥‡∏°‡∏∞‡∏ô‡∏≤‡∏ß‡πÇ‡∏ã‡∏î‡∏≤", 35), ("‡∏ô‡πâ‡∏≥‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•", 40),
        ("‡∏ô‡πâ‡∏≥‡∏ù‡∏£‡∏±‡πà‡∏á", 40)
    ],
    "‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©": [
        ("‡∏ô‡∏°‡∏™‡∏î‡πÇ‡∏≠‡∏£‡∏¥‡πÇ‡∏≠‡πâ", 50), ("‡∏ô‡∏°‡∏ä‡∏°‡∏û‡∏π", 40), ("‡∏ô‡∏°‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏°‡∏•", 45)
    ]
}


# --- Data Handling ---
def load_users():
    """Loads user data from a JSON file."""
    if os.path.exists(USER_FILE):
        with open(USER_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_users(users):
    """Saves user data to a JSON file."""
    with open(USER_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)


# --- GUI Classes (Frames) ---

class LoginPage(ttk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)

        main_frame = ttk.Frame(self, padding="40")
        main_frame.pack(expand=True)

        ttk.Label(main_frame, text="‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏π‡πâ‡πÄ‡∏ï‡πà‡∏≤‡∏ö‡∏¥‡∏ô", font=("Arial", 16, "bold")).pack(pady=10)

        ttk.Label(main_frame, text="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ").pack()
        self.username_entry = ttk.Entry(main_frame, font=("Arial", 12))
        self.username_entry.pack()

        ttk.Label(main_frame, text="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô").pack(pady=5)
        self.password_entry = ttk.Entry(main_frame, show="*", font=("Arial", 12))
        self.password_entry.pack()

        ttk.Button(main_frame, text="‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", command=self.login_user).pack(pady=5)

        ttk.Button(main_frame, text="‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", command=lambda: controller.show_frame("RegisterPage")).pack(pady=5)

        self.status_var = tk.StringVar(value="")
        ttk.Label(main_frame, textvariable=self.status_var, foreground="green", font=("Arial", 11)).pack(pady=10)

    def login_user(self):
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        users = load_users()

        if username not in users:
            self.status_var.set("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
            return

        if users[username]["password"] == password:
            self.status_var.set("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
            self.controller.current_user = username
            self.controller.after(500, lambda: self.controller.show_frame("ShopPage"))
        else:
            self.status_var.set("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")


class RegisterPage(ttk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, padding="20")
        self.controller = controller

        main_frame = ttk.Frame(self, padding="20")
        main_frame.pack(expand=True)

        ttk.Label(main_frame, text="‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", font=("Arial", 16, "bold")).pack(pady=10)

        self.fields = {}
        labels = ["‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (4 ‡∏´‡∏•‡∏±‡∏Å)", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"]
        for label_text in labels:
            ttk.Label(main_frame, text=label_text).pack()
            entry = ttk.Entry(main_frame, font=("Arial", 12))
            if "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" in label_text:
                entry.config(show="*")
            entry.pack(pady=2)
            self.fields[label_text] = entry

        ttk.Button(main_frame, text="‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", command=self.register_user).pack(pady=10)
        ttk.Button(main_frame, text="‡∏Å‡∏•‡∏±‡∏ö", command=lambda: controller.show_frame("LoginPage")).pack()

        self.status_var = tk.StringVar(value="")
        ttk.Label(main_frame, textvariable=self.status_var, foreground="red", font=("Arial", 11)).pack(pady=10)

    def register_user(self):
        username = self.fields["‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"].get().strip()
        password = self.fields["‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (4 ‡∏´‡∏•‡∏±‡∏Å)"].get().strip()
        phone = self.fields["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"].get().strip()
        bank_number = self.fields["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"].get().strip()
        bank_name = self.fields["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"].get().strip()

        if not all([username, password, phone, bank_number, bank_name]):
            self.status_var.set("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            return
        if len(password) != 4 or not password.isdigit():
            self.status_var.set("‚ö†Ô∏è ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å")
            return
        if not (phone.isdigit() and len(phone) == 10):
            self.status_var.set("‚ö†Ô∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å")
            return
        if not (bank_number.isdigit() and len(bank_number) == 10):
            self.status_var.set("‚ö†Ô∏è ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å)")
            return

        users = load_users()
        if username in users:
            self.status_var.set("‚ùå ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return
        for user, data in users.items():
            if data.get("bank_number") == bank_number:
                self.status_var.set("‚ùå ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
                return

        users[username] = {
            "password": password, "phone": phone,
            "bank_number": bank_number, "bank_name": bank_name,
            "balance": 0, "order_history": []
        }
        save_users(users)
        self.status_var.set("‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        self.controller.after(2000, lambda: self.controller.show_frame("LoginPage"))


class ShopPage(ttk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)

        top_frame = ttk.Frame(self, padding="10")
        top_frame.pack(side="top", fill="x")

        ttk.Button(top_frame, text="‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", command=self.logout).pack(side="left", padx=5)
        ttk.Button(top_frame, text="üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
                   command=lambda: self.controller.show_frame("HistoryPage")).pack(side="left", padx=5)

        self.balance_var = tk.StringVar()
        self.balance_label = ttk.Label(top_frame, textvariable=self.balance_var, font=("Arial", 12, "bold"))
        self.balance_label.pack(side="right", padx=10)
        ttk.Button(top_frame, text="üí∞ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô", command=lambda: self.controller.show_frame("DepositPage")).pack(
            side="right", padx=5)

        self.shop_status_var = tk.StringVar(value="")
        ttk.Label(self, textvariable=self.shop_status_var, foreground="red", font=("Arial", 12)).pack(pady=(0, 10))

        main_frame = ttk.Frame(self)
        main_frame.pack(fill="both", expand=True, padx=10, pady=5)

        sidebar_frame = ttk.Frame(main_frame, width=150)
        sidebar_frame.pack(side="left", fill="y", padx=(0, 10))
        ttk.Label(sidebar_frame, text="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", font=("Arial", 14, "bold")).pack(pady=10)

        categories = list(PRODUCTS_BY_CATEGORY.keys())
        for category in categories:
            ttk.Button(sidebar_frame, text=category, command=lambda c=category: self.show_products(c)).pack(fill="x",
                                                                                                            padx=5,
                                                                                                            pady=2)

        self.product_display_frame = ttk.Frame(main_frame)
        self.product_display_frame.pack(side="left", fill="both", expand=True)

        self.update_balance()
        self.show_products(categories[0])

    def update_balance(self):
        users = load_users()
        self.balance_var.set(f"‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: {users.get(self.controller.current_user, {}).get('balance', 0)} ‡∏ö‡∏≤‡∏ó")

    def logout(self):
        self.controller.current_user = None
        messagebox.showinfo("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
        self.controller.show_frame("LoginPage")

    def show_products(self, category):
        for widget in self.product_display_frame.winfo_children():
            widget.destroy()

        canvas = tk.Canvas(self.product_display_frame)
        scrollbar = ttk.Scrollbar(self.product_display_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)

        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        items = PRODUCTS_BY_CATEGORY.get(category, [])
        for name, price in items:
            item_frame = ttk.Frame(scrollable_frame)
            item_frame.pack(fill="x", padx=10, pady=5)

            ttk.Label(item_frame, text=f"{name} - {price} ‡∏ö‡∏≤‡∏ó", font=("Arial", 12)).pack(side="left")
            ttk.Button(item_frame, text="‡∏ã‡∏∑‡πâ‡∏≠", command=lambda n=name, p=price: self.buy_product(n, p)).pack(
                side="right")

    def buy_product(self, name, price):
        users = load_users()
        if users[self.controller.current_user]["balance"] < price:
            self.shop_status_var.set("‚ö†Ô∏è ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô")
            return

        response = messagebox.askyesno("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", f"‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ {name} ‡∏£‡∏≤‡∏Ñ‡∏≤ {price} ‡∏ö‡∏≤‡∏ó ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
        if response:
            users[self.controller.current_user]["balance"] -= price
            order = {"product": name, "price": price, "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
            users[self.controller.current_user]["order_history"].append(order)
            save_users(users)
            self.update_balance()
            self.shop_status_var.set(f"‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠ {name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        else:
            self.shop_status_var.set(f"‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ {name}")


class DepositPage(ttk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, padding="20")

        main_frame = ttk.Frame(self, padding="20")
        main_frame.pack(expand=True)

        ttk.Label(main_frame, text="‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô", font=("Arial", 16, "bold")).pack(pady=10)

        ttk.Label(main_frame, text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°:").pack()
        self.deposit_amount = ttk.Entry(main_frame)
        self.deposit_amount.pack(pady=5)

        ttk.Button(main_frame, text="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô", command=self.confirm_deposit).pack(pady=10)
        ttk.Button(main_frame, text="‡∏Å‡∏•‡∏±‡∏ö", command=lambda: self.controller.show_frame("ShopPage")).pack()

        self.status_var = tk.StringVar(value="")
        ttk.Label(main_frame, textvariable=self.status_var, foreground="green", font=("Arial", 11)).pack(pady=10)

    def confirm_deposit(self):
        amount_str = self.deposit_amount.get()
        if not amount_str.isdigit() or int(amount_str) <= 0:
            self.status_var.set("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return

        amount = int(amount_str)

        users = load_users()
        users[self.controller.current_user]["balance"] += amount
        save_users(users)
        self.status_var.set(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô {amount} ‡∏ö‡∏≤‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        self.controller.after(1500, lambda: self.controller.show_frame("ShopPage"))


class HistoryPage(ttk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, padding="20")

        main_frame = ttk.Frame(self, padding="20")
        main_frame.pack(expand=True)

        ttk.Label(main_frame, text="üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", font=("Arial", 16, "bold")).pack(pady=10)

        self.history_text = tk.Text(main_frame, wrap="word", height=20, width=50)
        self.history_text.pack(pady=10)
        self.history_text.config(state=tk.DISABLED)  # Make it read-only

        ttk.Button(main_frame, text="‡∏Å‡∏•‡∏±‡∏ö", command=lambda: controller.show_frame("ShopPage")).pack(pady=10)

    def show_history(self):
        self.history_text.config(state=tk.NORMAL)
        self.history_text.delete(1.0, tk.END)

        users = load_users()
        history = users.get(self.controller.current_user, {}).get("order_history", [])

        if not history:
            self.history_text.insert(tk.END, "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")
        else:
            for i, order in enumerate(history):
                order_text = f"--- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {i + 1} ---\n"
                order_text += f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {order['product']}\n"
                order_text += f"‡∏£‡∏≤‡∏Ñ‡∏≤: {order['price']} ‡∏ö‡∏≤‡∏ó\n"
                order_text += f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {order['timestamp']}\n\n"
                self.history_text.insert(tk.END, order_text)

        self.history_text.config(state=tk.DISABLED)


# --- Main Application ---
class MainApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("‡∏ï‡∏π‡πâ‡πÄ‡∏ï‡πà‡∏≤‡∏ö‡∏¥‡∏ô")
        self.geometry("600x600")
        self.current_user = None

        self.style = ttk.Style(self)
        self.style.theme_use('clam')

        self.container = ttk.Frame(self)
        self.container.pack(side="top", fill="both", expand=True)

        self.frames = {}
        for F in (LoginPage, RegisterPage, ShopPage, DepositPage, HistoryPage):
            page_name = F.__name__
            frame = F(parent=self.container, controller=self)
            self.frames[page_name] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame("LoginPage")

    def show_frame(self, page_name):
        frame = self.frames[page_name]
        frame.tkraise()
        if page_name == "ShopPage":
            frame.update_balance()
        elif page_name == "HistoryPage":
            frame.show_history()

    def get_user_data(self):
        users = load_users()
        return users.get(self.current_user, {})


if __name__ == "__main__":
    app = MainApp()
    app.mainloop()